// Code generated by MockGen. DO NOT EDIT.
// Source: src/repositories/image.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tam-code/image-upload/src/models"
)

// MockImageRepository is a mock of ImageRepository interface.
type MockImageRepository struct {
	ctrl     *gomock.Controller
	recorder *MockImageRepositoryMockRecorder
}

// MockImageRepositoryMockRecorder is the mock recorder for MockImageRepository.
type MockImageRepositoryMockRecorder struct {
	mock *MockImageRepository
}

// NewMockImageRepository creates a new mock instance.
func NewMockImageRepository(ctrl *gomock.Controller) *MockImageRepository {
	mock := &MockImageRepository{ctrl: ctrl}
	mock.recorder = &MockImageRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockImageRepository) EXPECT() *MockImageRepositoryMockRecorder {
	return m.recorder
}

// GetImageByID mocks base method.
func (m *MockImageRepository) GetImageByID(arg0 string) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByID", arg0)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByID indicates an expected call of GetImageByID.
func (mr *MockImageRepositoryMockRecorder) GetImageByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByID", reflect.TypeOf((*MockImageRepository)(nil).GetImageByID), arg0)
}

// GetImageByName mocks base method.
func (m *MockImageRepository) GetImageByName(arg0 string) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByName", arg0)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByName indicates an expected call of GetImageByName.
func (mr *MockImageRepositoryMockRecorder) GetImageByName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByName", reflect.TypeOf((*MockImageRepository)(nil).GetImageByName), arg0)
}

// GetImageByNameAndUploadLinkID mocks base method.
func (m *MockImageRepository) GetImageByNameAndUploadLinkID(arg0, arg1 string) (*models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImageByNameAndUploadLinkID", arg0, arg1)
	ret0, _ := ret[0].(*models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImageByNameAndUploadLinkID indicates an expected call of GetImageByNameAndUploadLinkID.
func (mr *MockImageRepositoryMockRecorder) GetImageByNameAndUploadLinkID(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImageByNameAndUploadLinkID", reflect.TypeOf((*MockImageRepository)(nil).GetImageByNameAndUploadLinkID), arg0, arg1)
}

// GetImagesByIDs mocks base method.
func (m *MockImageRepository) GetImagesByIDs(arg0 []string) ([]models.Image, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetImagesByIDs", arg0)
	ret0, _ := ret[0].([]models.Image)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetImagesByIDs indicates an expected call of GetImagesByIDs.
func (mr *MockImageRepositoryMockRecorder) GetImagesByIDs(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetImagesByIDs", reflect.TypeOf((*MockImageRepository)(nil).GetImagesByIDs), arg0)
}

// InsertImages mocks base method.
func (m *MockImageRepository) InsertImages(arg0 []interface{}) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertImages", arg0)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InsertImages indicates an expected call of InsertImages.
func (mr *MockImageRepositoryMockRecorder) InsertImages(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertImages", reflect.TypeOf((*MockImageRepository)(nil).InsertImages), arg0)
}

// UpdateImage mocks base method.
func (m *MockImageRepository) UpdateImage(arg0 *models.Image) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateImage", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateImage indicates an expected call of UpdateImage.
func (mr *MockImageRepositoryMockRecorder) UpdateImage(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateImage", reflect.TypeOf((*MockImageRepository)(nil).UpdateImage), arg0)
}
