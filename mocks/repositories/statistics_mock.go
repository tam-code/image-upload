// Code generated by MockGen. DO NOT EDIT.
// Source: src/repositories/statistics.go

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/tam-code/image-upload/src/models"
)

// MockStatisticsRepository is a mock of StatisticsRepository interface.
type MockStatisticsRepository struct {
	ctrl     *gomock.Controller
	recorder *MockStatisticsRepositoryMockRecorder
}

// MockStatisticsRepositoryMockRecorder is the mock recorder for MockStatisticsRepository.
type MockStatisticsRepositoryMockRecorder struct {
	mock *MockStatisticsRepository
}

// NewMockStatisticsRepository creates a new mock instance.
func NewMockStatisticsRepository(ctrl *gomock.Controller) *MockStatisticsRepository {
	mock := &MockStatisticsRepository{ctrl: ctrl}
	mock.recorder = &MockStatisticsRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStatisticsRepository) EXPECT() *MockStatisticsRepositoryMockRecorder {
	return m.recorder
}

// GetStatistics mocks base method.
func (m *MockStatisticsRepository) GetStatistics(statisticsType models.StatisticsType, name string) (*models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatistics", statisticsType, name)
	ret0, _ := ret[0].(*models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatistics indicates an expected call of GetStatistics.
func (mr *MockStatisticsRepositoryMockRecorder) GetStatistics(statisticsType, name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatistics", reflect.TypeOf((*MockStatisticsRepository)(nil).GetStatistics), statisticsType, name)
}

// GetStatisticsFrequency mocks base method.
func (m *MockStatisticsRepository) GetStatisticsFrequency(statisticsType models.StatisticsType, limit int) ([]models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsFrequency", statisticsType, limit)
	ret0, _ := ret[0].([]models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsFrequency indicates an expected call of GetStatisticsFrequency.
func (mr *MockStatisticsRepositoryMockRecorder) GetStatisticsFrequency(statisticsType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsFrequency", reflect.TypeOf((*MockStatisticsRepository)(nil).GetStatisticsFrequency), statisticsType, limit)
}

// GetStatisticsSortedByCount mocks base method.
func (m *MockStatisticsRepository) GetStatisticsSortedByCount(statisticsType models.StatisticsType, limit int) ([]models.Statistics, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetStatisticsSortedByCount", statisticsType, limit)
	ret0, _ := ret[0].([]models.Statistics)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetStatisticsSortedByCount indicates an expected call of GetStatisticsSortedByCount.
func (mr *MockStatisticsRepositoryMockRecorder) GetStatisticsSortedByCount(statisticsType, limit interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetStatisticsSortedByCount", reflect.TypeOf((*MockStatisticsRepository)(nil).GetStatisticsSortedByCount), statisticsType, limit)
}

// InsertStatistics mocks base method.
func (m *MockStatisticsRepository) InsertStatistics(statistics *models.Statistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InsertStatistics", statistics)
	ret0, _ := ret[0].(error)
	return ret0
}

// InsertStatistics indicates an expected call of InsertStatistics.
func (mr *MockStatisticsRepositoryMockRecorder) InsertStatistics(statistics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InsertStatistics", reflect.TypeOf((*MockStatisticsRepository)(nil).InsertStatistics), statistics)
}

// UpdateStatistics mocks base method.
func (m *MockStatisticsRepository) UpdateStatistics(statistics *models.Statistics) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateStatistics", statistics)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateStatistics indicates an expected call of UpdateStatistics.
func (mr *MockStatisticsRepositoryMockRecorder) UpdateStatistics(statistics interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateStatistics", reflect.TypeOf((*MockStatisticsRepository)(nil).UpdateStatistics), statistics)
}
